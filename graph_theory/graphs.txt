Graph Theory is the mathematical theory of the properties and applications of graphs (networks).

Types of Graphs:
    -   Undirected Graph: it is a graph in which edges have no orientation. The edge (u, v)
        is identical to the edge (v, u).
    
    -   Directed Graph (Digraph): it is a graph in which edges have orientations. For example,
        the edge (u, v) is the edge from node 'u' to node 'v'. The existence of (u, v) edge
        does not mean the edge (v, u) exists. The direction of the edges is denoted by arrows in
        in the edges. Every vertex in such a graph will have zero or more incoming and outgoing
        edges.
    
    -   Weighted Graphs: Many graphs can have edges that contain a certain weight to represent an
        arbitrary value such as cost, distance, quantity etc. One way of representing the edges
        of such a graph is using a triplet such as (u, v, w) and specify whether the graph is Directed
        or Undirected.
    
    -   Trees: a tree is a special type of a graph. It is an undirected graph with no cycles (no vertex
        in the graph will have a edge path that starts and ends in the same vertex). It is a connected
        graph with N nodes and N-1 edges.
        A rooted tree is a tree with a designated "root node", where every edge either points away from
        or towards the "root node". When edges point away from the "root node", the graph is called an
        "arborescence" (out-tree) and "anti-arborescence" (in-tree)in the other case where every edge 
        points towards the "root node".
    
    -   Directed Acyclic Graphs (DAGs): these are Directed graphs without any cycles. These graphs play
        an important role in representing structures with dependencies (scheduler, build-systems, 
        compilers). Several efficient algorithms exist to operate of DAGs. 
        All out-trees are DAGs but not all DAGs are out-trees.
    
    -   Bipartite Graphs: it is a graph whose vertices can be split into two independent groups 'U' and
        'V' such that every edge connects between 'U' and 'V'. Other definitions exist, such as the
        graph is two colourable or there is no odd length cycle.

    -   Complete Graph: it is a graph in which there is a unique edge between every pair of nodes.
        A complete graph with 'n' vertices is denoted as the graph 'K_n'

    
Representing Graphs:
    -   Adjacency Matrix: An adjacency matrix 'm' is a very simple wat to represent a graph as a 2D matrix. 
        The idea is that the cell 'm[i][j]' represents the edge weight of going from node 'i' to node 'j'. 
        It is often assumed that the edge going from a node to itself has a cost of zero. Hence, the
        diagonal of the adjacency matrix will have zeroes. Adjacency Matrix is very space efficient in
        terms of representing dense graphs with lots of edges. The time complexity of edge weight lookup 
        is just O(1). It is also the simplest form of graph representation. However, it has O(V^2) space 
        complexity and iterating over all edges takes O(V^2) time complexity.
    
    -   Adjacency List: it is another alternative to representa a graph where a (hash)map of nodes to list 
        of edges is used. Adjacency Lists are very efficient for representing sparse graphs with low
        number of edges and iterating over all edges is efficient compared to an adjacency matrix. 
        However, the Adjacency List becomes less efficient for storing dense graphs with lots of edges
        and the edge weight lookup has O(E) time complexity. This is a slightly more complex form of 
        graph representation.

    -   Edge List: The Edge List is a way to represent a graph simply as an unordered list of edges.
        Assume the notation for any triplet (u, v, w) means: "the cost from node u to node v is w".
        This representation is seldom used because of its lack of structure. However, it is conceptually
        simple and practical in a handful of algorithms. This representation is efficient for sparse
        graphs with less number of edges and iterating over all edges is efficient. It also has a very
        simple structure. However, it is not space efficient for dense graphs with a lot of edges and
        the time complexity of edge weight lookup is O(E).

    -   The implicit graph representation is a graph whose vertices or edges are not represented as 
        explicit objects in a computer's memory, but rather are determined algorithmically from some 
        more concise input.
    
    